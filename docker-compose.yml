version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    loki-data: {}

networks:
  frontend:
  backend:

services:

  prometheus:
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    
    networks:
      - backend
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - backend
    restart: always
    deploy:
      mode: global

  
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - backend
      - frontend
    restart: always

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    command: -config.file=/etc/loki/local-config.yaml
    volumes: 
      - loki-data:/etc/loki
  
  api:
    build: ./PoC.Api
    ports:
      - 5400:5000
    networks:
      - backend
    restart: always
  
  service:
    build: ./PoC.Service
    ports:
      - 5500:5000
    networks:
      - backend
    restart: always